import React, { useEffect, useState } from 'react'
import { getAuth, updateProfile } from 'firebase/auth'
import type { NextPage } from 'next'
import { auth } from '../firebase'
import Head from 'next/head'
import Header from '../components/Header'
import Feed from '../components/Feed'
import Login from '../components/Login'
import Modal from '../components/Modal'

const Home: NextPage = () => {
  const [user, setUser] = useState<string | null>('')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [username, setUsername] = useState('')
  const [avatar, setAvatar] = useState('')
  const [emailError, setEmailError] = useState('')
  const [passwordError, setPasswordError] = useState('')
  const [hasAccount, setHasAccount] = useState(false)
  const clearInputs = () => {
    setEmail('')
    setPassword('')
  }
  const clearErrors = () => {
    setEmailError('')
    setPasswordError('')
  }
  const handleLogin = () => {
    clearErrors()
    auth
      .signInWithEmailAndPassword(email, password)
      .catch(
        (err: {
          code: any
          message: React.SetStateAction<string>
          mesage: React.SetStateAction<string>
        }) => {
          switch (err.code) {
            case 'auth/invalid-email':
            case 'auth/user-disabled':
            case 'auth/user-not-found':
              setEmailError(err.message)
              break
            case 'auth/wrong-password':
              setPasswordError(err.mesage)
              break
          }
        }
      )
  }
  const handleSignUp = () => {
    clearErrors()
    auth
      .createUserWithEmailAndPassword(email, password)
      .catch(
        (err: {
          code: any
          message: React.SetStateAction<string>
          mesage: React.SetStateAction<string>
        }) => {
          switch (err.code) {
            case 'auth/email-already-in-use':
            case 'auth/invalid-email':
              setEmailError(err.message)
              break
            case 'auth/weak-password':
              setPasswordError(err.mesage)
              break
          }
        }
      )
      .then(async () => {
        await auth.currentUser?.updateProfile({
          displayName: username,
          photoURL: avatar,
        })
      })
  }
  const handleLogout = () => {
    auth.signOut()
  }
  const authListener = () => {
    auth.onAuthStateChanged((user: any) => {
      if (user) {
        clearInputs()
        setUser(user)
      } else {
        setUser('')
      }
    })
  }
  useEffect(() => {
    authListener()
  })
  return (
    <div className="bg-gray-50 h-screen overflow-y-scroll scrollbar-hide">
      <Head>
        <title>Instagram</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.png" />
      </Head>
      {user ? (
        <div className="bg-gray-50 h-screen overflow-y-scroll scrollbar-hide">
          <Header username={username} avatar={avatar} />
          <Feed handleLogout={handleLogout} username={username} avatar={avatar} />
          <Modal />
        </div>
      ) : (
        <Login
          email={email}
          setEmail={setEmail}
          password={password}
          setPassword={setPassword}
          username={username}
          setUsername={setUsername}
          avata={avatar}
          setAvatar={setAvatar}
          handleLogin={handleLogin}
          handleSignUp={handleSignUp}
          hasAccount={hasAccount}
          setHasAccount={setHasAccount}
          emailError={emailError}
          passwordError={passwordError}
        />
      )}
    </div>
  )
}

export default Home
